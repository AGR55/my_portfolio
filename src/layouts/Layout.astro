---
import "../styles/global.css";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import ThemeToggle from "../components/ThemeToggle.astro";
import { ClientRouter } from "astro:transitions";

interface Props {
  title: string;
  description?: string;
  ogImage?: string;
}

const {
  title,
  description = "Professional portfolio showcasing my work, skills, and experience.",
  ogImage = "/images/og-image.jpg",
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content="Adriano Gonzalez Reyes" />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={ogImage} />

    <!-- Preload fonts for better performance -->
    <link
      rel="preload"
      href="/fonts/inter-var.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <!-- Theme handling script -->
    <script is:inline>
      const theme = (() => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      })();

      if (theme === "dark") {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    </script>

    <!-- View transitions for smoother navigation -->
    <ClientRouter />
  </head>
  <body
    class="bg-gradient-to-b from-neutral-950 via-neutral-900 to-neutral-950 text-neutral-300 min-h-screen flex flex-col transition-colors duration-300 antialiased"
  >
    <!-- Accesibilidad: Saltar al contenido principal -->
    <a
      href="#main-content"
      class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-neutral-800 text-white px-4 py-2 z-50 rounded-md"
    >
      Skip to content
    </a>

    <!-- Fondo sutil con gradiente - reducido en opacidad -->
    <div
      class="fixed inset-0 bg-gradient-to-b from-neutral-950 via-neutral-900 to-neutral-950 z-[-2]"
    >
    </div>
    
    <!-- Patrones sutiles para textura - versión simplificada -->
    <div 
      class="fixed inset-0 bg-[radial-gradient(circle_at_center,rgba(30,41,59,0.3)_0,rgba(15,23,42,0)_50%,rgba(15,23,42,0)_100%)] z-[-1]"
    >
    </div>

    <Header />
    <main id="main-content" class="flex-grow relative z-10">
      <slot />
    </main>
    <ThemeToggle />
    <Footer />
  </body>
</html>

<style is:global>
  /* Estilos para enfoque y selección */
  :focus-visible {
    outline: 2px solid rgba(59, 130, 246, 0.6);
    outline-offset: 2px;
  }

  /* Smooth scrolling para la página */
  html.smooth-scroll {
    scroll-behavior: smooth;
  }

  /* Selección de texto mejorada */
  ::selection {
    background-color: rgba(30, 58, 138, 0.3);
    color: #e2e8f0;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Habilitar scroll suave solo si no hay preferencia por movimiento reducido
    if (!window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
      document.documentElement.classList.add("smooth-scroll");
    }
    
    // Animaciones sutiles de entrada al cargar la página
    setTimeout(() => {
      document.querySelectorAll(".animate-on-scroll").forEach((el) => {
        if (el.getBoundingClientRect().top < window.innerHeight) {
          el.classList.add("visible");
        }
      });
    }, 300);

    // Observer para animaciones de scroll simplificadas
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("visible");
            // Dejar de observar una vez visible
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.2 }
    );

    document
      .querySelectorAll(".animate-on-scroll:not(.visible)")
      .forEach((el) => {
        observer.observe(el);
      });
  });
</script>
