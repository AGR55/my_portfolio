---
const navItems = [
  { name: "Home", url: "/", ariaLabel: "Go to home page" },
  { name: "About", url: "/#about", ariaLabel: "Learn about me" },
  { name: "Projects", url: "/#projects", ariaLabel: "View my projects" },
  { name: "Contact", url: "/#contact", ariaLabel: "Get in touch" },
];
---

<nav class="relative z-50">
  <!-- Desktop Navigation -->
  <div class="hidden md:flex items-center space-x-8">
    {
      navItems.map((item) => (
        <a
          href={item.url}
          class="text-neutral-400 hover:text-neutral-200 transition-colors duration-300 py-1 relative group nav-link"
          aria-label={item.ariaLabel}
        >
          {/* Línea de destaque al hacer hover */}
          <span class="absolute bottom-0 left-0 w-0 h-px bg-neutral-500 transition-all duration-300 group-hover:w-full" />
          {item.name}
        </a>
      ))
    }
  </div>

  <!-- Mobile Navigation Toggle Button -->
  <button
    id="mobile-nav-toggle"
    class="md:hidden flex items-center text-neutral-400 hover:text-neutral-200 transition-colors"
    aria-label="Toggle navigation menu"
  >
    <svg
      id="hamburger-icon"
      xmlns="http://www.w3.org/2000/svg"
      class="h-6 w-6"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
    <svg
      id="close-icon"
      xmlns="http://www.w3.org/2000/svg"
      class="h-6 w-6 hidden"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M6 18L18 6M6 6l12 12"></path>
    </svg>
  </button>

  <!-- Mobile Navigation Menu -->
  <div
    id="mobile-nav"
    class="md:hidden fixed inset-0 bg-neutral-950/90 backdrop-blur-md flex flex-col justify-center items-center z-50 transform translate-x-full transition-transform duration-300 ease-in-out"
  >
    <div class="flex flex-col items-center space-y-6">
      {
        navItems.map((item) => (
          <a
            href={item.url}
            class="text-neutral-300 hover:text-white text-2xl transition-colors duration-300 mobile-nav-link"
            aria-label={item.ariaLabel}
          >
            {item.name}
          </a>
        ))
      }
    </div>
  </div>
</nav>

<script>
  // Manejo de la navegación móvil y navegación suave
  document.addEventListener("DOMContentLoaded", () => {
    const mobileNavToggle = document.getElementById("mobile-nav-toggle");
    const mobileNav = document.getElementById("mobile-nav");
    const hamburgerIcon = document.getElementById("hamburger-icon");
    const closeIcon = document.getElementById("close-icon");
    const mobileNavLinks = document.querySelectorAll(".mobile-nav-link");
    const allNavLinks = document.querySelectorAll(
      ".nav-link, .mobile-nav-link"
    );

    // Función para alternar la navegación móvil
    const toggleMobileNav = () => {
      if (mobileNav && hamburgerIcon && closeIcon) {
        const isOpen = mobileNav.classList.contains("translate-x-0");

        if (isOpen) {
          mobileNav.classList.remove("translate-x-0");
          mobileNav.classList.add("translate-x-full");
          hamburgerIcon.classList.remove("hidden");
          closeIcon.classList.add("hidden");
          document.body.classList.remove("overflow-hidden");
        } else {
          mobileNav.classList.add("translate-x-0");
          mobileNav.classList.remove("translate-x-full");
          hamburgerIcon.classList.add("hidden");
          closeIcon.classList.remove("hidden");
          document.body.classList.add("overflow-hidden");
        }
      }
    };

    // Función para manejar navegación suave
    const handleNavigation = (e: Event) => {
      const href = (e.target as HTMLElement).getAttribute("href");

      // Si es la página principal y estamos ya en ella, scroll al top
      if (href === "/" && window.location.pathname === "/") {
        e.preventDefault();
        window.scrollTo({ top: 0, behavior: "smooth" });
        return;
      }

      // Si es un enlace de ancla en la misma página
      if (href && href.startsWith("/#")) {
        const targetId = href.substring(2); // Quitar "/#"
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          e.preventDefault();
          targetElement.scrollIntoView({ behavior: "smooth" });
        }
      }
    };

    if (mobileNavToggle && mobileNav && hamburgerIcon && closeIcon) {
      // Toggle on button click
      mobileNavToggle.addEventListener("click", toggleMobileNav);

      // Cerrar la navegación al hacer clic en un enlace móvil
      mobileNavLinks.forEach((link) => {
        link.addEventListener("click", (e) => {
          handleNavigation(e);
          toggleMobileNav();
        });
      });

      // Cerrar la navegación si la ventana se redimensiona a un tamaño de escritorio
      window.addEventListener("resize", () => {
        if (
          window.innerWidth >= 768 &&
          mobileNav.classList.contains("translate-x-0")
        ) {
          mobileNav.classList.remove("translate-x-0");
          mobileNav.classList.add("translate-x-full");
          hamburgerIcon.classList.remove("hidden");
          closeIcon.classList.add("hidden");
          document.body.classList.remove("overflow-hidden");
        }
      });
    }

    // Agregar manejo de navegación suave a todos los enlaces de navegación
    allNavLinks.forEach((link) => {
      link.addEventListener("click", handleNavigation);
    });
  });
</script>
