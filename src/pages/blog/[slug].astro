---
import { getCollection, getEntryBySlug } from "astro:content";
import Layout from "../../layouts/Layout.astro";

// Generate paths for all blog posts
export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  return blogEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the blog post data from the collection
const { entry } = Astro.props;
const { Content } = await entry.render();

// Format the date
const formattedDate = new Date(entry.data.publishDate).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Get related posts (same tag, excluding current post)
const allPosts = await getCollection("blog");
const relatedPosts = allPosts
  .filter(post => 
    post.slug !== entry.slug && 
    post.data.tags.some(tag => entry.data.tags.includes(tag))
  )
  .sort(() => Math.random() - 0.5) // Shuffle array
  .slice(0, 3); // Get up to 3 related posts
---

<Layout 
  title={`${entry.data.title} - Your Name's Blog`}
  description={entry.data.excerpt}
  ogImage={entry.data.coverImage}
>
  <article class="pt-32 pb-16 md:pt-40 md:pb-24">
    <div class="container-custom max-w-4xl">
      <div class="mb-8">
        <div class="flex gap-2 flex-wrap mb-4">
          {entry.data.tags.map((tag) => (
            <span class="px-3 py-1 text-sm font-medium bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 rounded-full">
              {tag}
            </span>
          ))}
        </div>
        
        <h1 class="heading-xl mb-6">{entry.data.title}</h1>
        
        <div class="flex items-center text-gray-600 dark:text-gray-400 mb-8">
          <time datetime={entry.data.publishDate.toISOString()}>{formattedDate}</time>
          <span class="mx-2">â€¢</span>
          <span>{entry.data.readingTime || '5 min read'}</span>
        </div>
        
        {entry.data.coverImage && (
          <div class="rounded-lg overflow-hidden mb-10">
            <img 
              src={entry.data.coverImage} 
              alt={entry.data.title}
              class="w-full h-auto object-cover" 
            />
          </div>
        )}
      </div>
      
      <div class="prose prose-lg dark:prose-invert max-w-none">
        <Content />
      </div>
      
      <div class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-800">
        <div class="flex flex-wrap gap-3">
          {entry.data.tags.map((tag) => (
            <a 
              href={`/tags/${tag}`}
              class="px-3 py-1 text-sm font-medium bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            >
              #{tag}
            </a>
          ))}
        </div>
      </div>
    </div>
    
    {relatedPosts.length > 0 && (
      <div class="container-custom max-w-7xl mt-16">
        <h2 class="heading-md mb-8">Related Articles</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {relatedPosts.map((post) => (
            <article class="card group hover:shadow-md transition-shadow duration-300">
              {post.data.coverImage && (
                <div class="relative overflow-hidden rounded-t-lg aspect-video">
                  <img 
                    src={post.data.coverImage} 
                    alt={post.data.title} 
                    class="w-full h-full object-cover object-center transition-transform duration-500 group-hover:scale-105"
                    loading="lazy"
                  />
                </div>
              )}
              
              <div class="p-6">
                <h3 class="heading-sm mb-2 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors">
                  <a href={`/blog/${post.slug}`}>
                    {post.data.title}
                  </a>
                </h3>
                
                <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-2">
                  {post.data.excerpt}
                </p>
                
                <div class="flex items-center justify-between mt-4">
                  <time 
                    datetime={post.data.publishDate.toISOString()}
                    class="text-sm text-gray-500 dark:text-gray-500"
                  >
                    {new Date(post.data.publishDate).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                  
                  <a 
                    href={`/blog/${post.slug}`} 
                    class="text-primary-600 dark:text-primary-400 font-medium hover:text-primary-700 dark:hover:text-primary-300 transition-colors"
                  >
                    Read more
                  </a>
                </div>
              </div>
            </article>
          ))}
        </div>
      </div>
    )}
  </article>
</Layout>